# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
#  push:
#    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  PROJECT_NAME: "spring-boot-cicd"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    
    
    # Build with gradle
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3 
    # gradlew 실행권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    # gradlew 실행
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      
    # s3에 접근할수 있어야해요- IAM에서 등록한 사용자
    # AWS 인증과정(Access Key, Secret Key, region)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # jar파일을 s3 버킷에 업로드
    # Upload a file to AWS s3
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ secrets.CODEDEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://${{secrets.S3_LOCATION_BUCKET}}/${{env.PROJECT_NAME}}.zip \
          --source .

    # S3버킷에 있을 파일을 EC2에 배포
    # S3 버킷에 있는 파일을 대상으로 EC2에 배포(codedeploy 어플리케이션 그룹 이름, codedeploy 어플리케이션 이름, 버킷 이름)
    # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ secrets.CODEDEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{secrets.S3_LOCATION_BUCKET}},key=${{env.PROJECT_NAME}}.zip,bundleType=zip
